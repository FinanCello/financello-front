{
  "version": 3,
  "sources": ["src/app/shared/snackbar/snackbar.service.ts", "src/app/services/Auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SnackbarService {\r\n  private snackbarSubject = new Subject<{\r\n    title: string,\r\n    message: string,\r\n    icon?: string,\r\n    showUndo?: boolean\r\n  }>();\r\n\r\n  snackbarState$ = this.snackbarSubject.asObservable();\r\n\r\n  showSnackbar(title: string, message: string, icon: string = '', showUndo = false) {\r\n    this.snackbarSubject.next({ title, message, icon, showUndo });\r\n  }\r\n}\r\n", "import { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  RegisterRequest,\r\n  LoginRequest,\r\n  AuthResponse,\r\n  UserProfileResponse,\r\n  UpdateProfileRequest,\r\n  UserWithRoleResponse,\r\n} from '../models/User';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/auth`;\r\n  private http = inject(HttpClient);\r\n\r\n  constructor() {}\r\n\r\n  register(request: RegisterRequest): Observable<void> {\r\n    return this.http.post<void>(\r\n      `${this.apiUrl}/register`,\r\n      request\r\n    );\r\n  }\r\n\r\n  login(request: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(\r\n      `${this.apiUrl}/login`,\r\n      request\r\n    );\r\n  }\r\n\r\n  getUserProfile(userId: number): Observable<UserProfileResponse> {\r\n    // si tu controlador mapea GET /auth/profile/{userId}\r\n    return this.http.get<UserProfileResponse>(\r\n      `${this.apiUrl}/profile/${userId}`\r\n    );\r\n  }\r\n\r\n  updateUserProfile(\r\n    userId: number,\r\n    request: UpdateProfileRequest\r\n  ): Observable<UserProfileResponse> {\r\n    // si tu controlador mapea PUT /auth/profile/{userId}\r\n    return this.http.put<UserProfileResponse>(\r\n      `${this.apiUrl}/profile/${userId}`,\r\n      request\r\n    );\r\n  }\r\n\r\n  getAllUsers(): Observable<UserWithRoleResponse[]> {\r\n    // si tu controlador tiene GET /users\r\n    return this.http.get<UserWithRoleResponse[]>(`${environment.apiUrl}/users`);\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;AAIM,IAAO,kBAAP,MAAO,iBAAe;EAClB,kBAAkB,IAAI,QAAO;EAOrC,iBAAiB,KAAK,gBAAgB,aAAY;EAElD,aAAa,OAAe,SAAiB,OAAe,IAAI,WAAW,OAAK;AAC9E,SAAK,gBAAgB,KAAK,EAAE,OAAO,SAAS,MAAM,SAAQ,CAAE;EAC9D;;qCAZW,kBAAe;EAAA;4EAAf,kBAAe,SAAf,iBAAe,WAAA,YADF,OAAM,CAAA;;;sEACnB,iBAAe,CAAA;UAD3B;WAAW,EAAE,YAAY,OAAM,CAAE;;;;;ACa5B,IAAO,cAAP,MAAO,aAAW;EACd,SAAS,GAAG,YAAY,MAAM;EAC9B,OAAO,OAAO,UAAU;EAEhC,cAAA;EAAe;EAEf,SAAS,SAAwB;AAC/B,WAAO,KAAK,KAAK,KACf,GAAG,KAAK,MAAM,aACd,OAAO;EAEX;EAEA,MAAM,SAAqB;AACzB,WAAO,KAAK,KAAK,KACf,GAAG,KAAK,MAAM,UACd,OAAO;EAEX;EAEA,eAAe,QAAc;AAE3B,WAAO,KAAK,KAAK,IACf,GAAG,KAAK,MAAM,YAAY,MAAM,EAAE;EAEtC;EAEA,kBACE,QACA,SAA6B;AAG7B,WAAO,KAAK,KAAK,IACf,GAAG,KAAK,MAAM,YAAY,MAAM,IAChC,OAAO;EAEX;EAEA,cAAW;AAET,WAAO,KAAK,KAAK,IAA4B,GAAG,YAAY,MAAM,QAAQ;EAC5E;;qCAzCW,cAAW;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;;sEAEP,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
