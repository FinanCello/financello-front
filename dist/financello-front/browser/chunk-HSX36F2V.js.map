{
  "version": 3,
  "sources": ["src/app/models/User.ts", "src/app/features/auth/register/register.component.ts", "src/app/features/auth/register/register.component.html"],
  "sourcesContent": ["export enum UserType {\r\n  PERSONAL = 'PERSONAL',\r\n  BUSINESS = 'BUSINESS'\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  userType: UserType;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  id: number;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  userType: string;\r\n  token: string;\r\n}\r\n\r\nexport interface UserProfileResponse {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n}\r\n\r\nexport interface UserWithRoleResponse {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../services/Auth.service';\r\nimport { RegisterRequest, UserType } from '../../../models/User';\r\nimport { SnackbarService } from '../../../shared/snackbar/snackbar.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n  registerForm: FormGroup;\r\n  isLoading = false;\r\n  errorMessage = '';\r\n  UserType = UserType;\r\n  private snackbarService = inject(SnackbarService);\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      firstName: ['', [Validators.required]],\r\n      lastName: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]],\r\n      userType: [UserType.PERSONAL, [Validators.required]]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.registerForm.markAllAsTouched();\r\n  \r\n    const isFormValid = this.registerForm.valid;\r\n    console.log('Formulario vÃ¡lido:', isFormValid);\r\n    console.log('Valores:', this.registerForm.value);\r\n  \r\n    if (!isFormValid) {\r\n      this.snackbarService.showSnackbar(\r\n        'Data are Missing',\r\n        'Complete all the required fields',\r\n        'icons/warning.png'\r\n      );\r\n      return;\r\n    }\r\n  \r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n  \r\n    const registerRequest: RegisterRequest = this.registerForm.value;\r\n  \r\n    this.authService.register(registerRequest).subscribe({\r\n      next: () => {\r\n        this.snackbarService.showSnackbar(\r\n          'Successful Record',\r\n          'User created correctly',\r\n          'icons/success.png'\r\n        );\r\n        this.router.navigate(['/auth/login']);\r\n      },\r\n      error: (error) => {\r\n        this.isLoading = false;\r\n        console.log('Error recibido:', error);\r\n  \r\n        const backendMsg = error.error?.detail || error.error?.message || 'Registration failed';\r\n  \r\n        if (backendMsg.includes('Usuario duplicado')) {\r\n          this.snackbarService.showSnackbar(\r\n            'Duplicate Mail',\r\n            'Email is already in use',\r\n            'icons/error.png'\r\n          );\r\n        } else if (backendMsg.includes('Username already exists')) {\r\n          this.snackbarService.showSnackbar(\r\n            'Existing User',\r\n            'Name was already registered',\r\n            'icons/error.png'\r\n          );\r\n        } else if (backendMsg.includes('blank spaces')) {\r\n          this.snackbarService.showSnackbar(\r\n            'Data are Missing',\r\n            'Complete all the required fields',\r\n            'icons/warning.png'\r\n          );\r\n        } else {\r\n          this.snackbarService.showSnackbar(\r\n            'Error',\r\n            backendMsg,\r\n            'icons/error.png'\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  goToLogin() {\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n}\r\n", "<div class=\"sign-up\">\r\n    <div class=\"content\">\r\n      <div class=\"login-glass\">\r\n        <div class=\"rectangle-27\"></div>\r\n        <div class=\"rectangle-26\"></div>\r\n        <div class=\"sign-up2\">\r\n          <div class=\"sign-up3\">Sign Up</div>\r\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"form\">\r\n            <div class=\"form-group\">\r\n              <img class=\"icons\" src=\"/assets/icons/user.svg\" />\r\n              <div class=\"input-wrapper\">\r\n                <input type=\"text\" id=\"firstName\" formControlName=\"firstName\" required placeholder=\" \" />\r\n                <label for=\"firstName\">First Name</label>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <img class=\"icons2\" src=\"/assets/icons/user.svg\" />\r\n              <div class=\"input-wrapper\">\r\n                <input type=\"text\" id=\"lastName\" formControlName=\"lastName\" required placeholder=\" \" />\r\n                <label for=\"lastName\">Last Name</label>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <img class=\"icons3\" src=\"/assets/icons/mail.svg\" />\r\n              <div class=\"input-wrapper\">\r\n                <input type=\"email\" id=\"email\" formControlName=\"email\" required placeholder=\" \" />\r\n                <label for=\"email\">E-mail</label>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <img class=\"icons4\" src=\"/assets/icons/lock.svg\" />\r\n              <div class=\"input-wrapper\">\r\n                <input type=\"password\" id=\"password\" formControlName=\"password\" required placeholder=\" \" />\r\n                <label for=\"password\">Password</label>\r\n              </div>\r\n            </div>\r\n            <button type=\"submit\" class=\"button\">\r\n              <span class=\"text\">Register</span>\r\n            </button>\r\n          </form>\r\n          <a class=\"alrady-have-an-account\" (click)=\"goToLogin()\">Alrady have an account?</a>\r\n        </div>\r\n      </div>\r\n      <img class=\"finacello-jpg\" src=\"/assets/img/financello.png\" />\r\n    </div>\r\n  </div>\r\n  "],
  "mappings": "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",
  "names": ["UserType"]
}
